import pymongo
from pymongo import MongoClient
from bson.objectid import ObjectId
import sys

def get_database():
    """
    –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    """
    try:
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ MongoDB, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–µ—Ä–≤—ñ—Å–Ω–µ —ñ–º'—è 'mongodb' –∑ docker-compose.yml
        client = MongoClient('mongodb://mongo:27017/')
        db = client['task_manager_db']
        return db
    except pymongo.errors.ConnectionError as ce:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {ce}")
        sys.exit(1)

def create_cat(db, name, age, features):
    """
    –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞ –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó.
    """
    try:
        cat = {
            "name": name,
            "age": age,
            "features": features
        }
        result = db.cats.insert_one(cat)
        print(f"–ö—ñ—Ç –¥–æ–¥–∞–Ω–æ –∑ _id: {result.inserted_id}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ç–∞: {e}")

def read_all_cats(db):
    """
    –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó.
    """
    try:
        cats = db.cats.find()
        for cat in cats:
            print(cat)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∫–æ—Ç—ñ–≤: {e}")

def read_cat_by_name(db, name):
    """
    –í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º.
    """
    try:
        cat = db.cats.find_one({"name": name})
        if cat:
            print(cat)
        else:
            print(f"–ö—ñ—Ç –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∫–æ—Ç–∞: {e}")

def update_cat_age(db, name, new_age):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É –∫–æ—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º.
    """
    try:
        result = db.cats.update_one({"name": name}, {"$set": {"age": new_age}})
        if result.matched_count:
            print(f"–í—ñ–∫ –∫–æ—Ç–∞ '{name}' –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_age}.")
        else:
            print(f"–ö—ñ—Ç –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–∫—É –∫–æ—Ç–∞: {e}")

def add_cat_feature(db, name, new_feature):
    """
    –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ —Å–ø–∏—Å–∫—É features –∫–æ—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º.
    """
    try:
        result = db.cats.update_one({"name": name}, {"$push": {"features": new_feature}})
        if result.matched_count:
            print(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ '{new_feature}' –¥–æ–¥–∞–Ω–∞ –¥–æ –∫–æ—Ç–∞ '{name}'.")
        else:
            print(f"–ö—ñ—Ç –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {e}")

def delete_cat_by_name(db, name):
    """
    –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º.
    """
    try:
        result = db.cats.delete_one({"name": name})
        if result.deleted_count:
            print(f"–ö—ñ—Ç –∑ —ñ–º'—è–º '{name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
        else:
            print(f"–ö—ñ—Ç –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ç–∞: {e}")

def delete_all_cats(db):
    """
    –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó.
    """
    try:
        result = db.cats.delete_many({})
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ {result.deleted_count} –∫–æ—Ç—ñ–≤ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤: {e}")

def main():
    db = get_database()

    while True:
        print("\n---üò∫ Task Manager ---")
        print("1. –î–æ–¥–∞—Ç–∏ –∫–æ—Ç–∞")
        print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
        print("3. –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º")
        print("4. –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–∫ –∫–æ—Ç–∞")
        print("5. –î–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫–æ—Ç—É")
        print("6. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º")
        print("7. –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
        print("8. –í–∏–π—Ç–∏ üêà‚Äç‚¨õ")
        
        choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ")

        if choice == '1':
            name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞: ")
            age = int(input("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫ –∫–æ—Ç–∞: "))
            features = input("–í–≤–µ–¥—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É: ").split(',')
            features = [feature.strip() for feature in features]
            create_cat(db, name, age, features)
        
        elif choice == '2':
            read_all_cats(db)
        
        elif choice == '3':
            name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞: ")
            read_cat_by_name(db, name)
        
        elif choice == '4':
            name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞: ")
            new_age = int(input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –≤—ñ–∫ –∫–æ—Ç–∞: "))
            update_cat_age(db, name, new_age)
        
        elif choice == '5':
            name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞: ")
            new_feature = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É: ")
            add_cat_feature(db, name, new_feature)
        
        elif choice == '6':
            name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
            delete_cat_by_name(db, name)
        
        elif choice == '7':
            confirm = input("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤? (—Ç–∞–∫/–Ω—ñ): ")
            if confirm.lower() == '—Ç–∞–∫':
                delete_all_cats(db)
        
        elif choice == '8':
            print("–í–∏—Ö—ñ–¥...")
            break
        
        else:
            print("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

if __name__ == "__main__":
    main()
